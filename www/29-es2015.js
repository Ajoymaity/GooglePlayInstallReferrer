(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[29],{

/***/ "./node_modules/@ionic/core/dist/esm/ion-input-ios.entry.js":
/*!******************************************************************!*\
  !*** ./node_modules/@ionic/core/dist/esm/ion-input-ios.entry.js ***!
  \******************************************************************/
/*! exports provided: ion_input */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ion_input\", function() { return Input; });\n/* harmony import */ var _core_feeeff0d_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core-feeeff0d.js */ \"./node_modules/@ionic/core/dist/esm/core-feeeff0d.js\");\n/* harmony import */ var _config_3c7f3790_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config-3c7f3790.js */ \"./node_modules/@ionic/core/dist/esm/config-3c7f3790.js\");\n/* harmony import */ var _helpers_46f4a262_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helpers-46f4a262.js */ \"./node_modules/@ionic/core/dist/esm/helpers-46f4a262.js\");\n/* harmony import */ var _theme_18cbe2cc_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./theme-18cbe2cc.js */ \"./node_modules/@ionic/core/dist/esm/theme-18cbe2cc.js\");\n\n\n\n\n\nconst Input = class {\n    constructor(hostRef) {\n        Object(_core_feeeff0d_js__WEBPACK_IMPORTED_MODULE_0__[\"r\"])(this, hostRef);\n        this.inputId = `ion-input-${inputIds++}`;\n        this.didBlurAfterEdit = false;\n        this.hasFocus = false;\n        /**\n         * Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user.\n         */\n        this.autocapitalize = 'off';\n        /**\n         * Indicates whether the value of the control can be automatically completed by the browser.\n         */\n        this.autocomplete = 'off';\n        /**\n         * Whether auto correction should be enabled when the user is entering/editing the text value.\n         */\n        this.autocorrect = 'off';\n        /**\n         * This Boolean attribute lets you specify that a form control should have input focus when the page loads.\n         */\n        this.autofocus = false;\n        /**\n         * If `true`, a clear icon will appear in the input when there is a value. Clicking it clears the input.\n         */\n        this.clearInput = false;\n        /**\n         * Set the amount of time, in milliseconds, to wait to trigger the `ionChange` event after each keystroke.\n         */\n        this.debounce = 0;\n        /**\n         * If `true`, the user cannot interact with the input.\n         */\n        this.disabled = false;\n        /**\n         * The name of the control, which is submitted with the form data.\n         */\n        this.name = this.inputId;\n        /**\n         * If `true`, the user cannot modify the value.\n         */\n        this.readonly = false;\n        /**\n         * If `true`, the user must fill in a value before submitting a form.\n         */\n        this.required = false;\n        /**\n         * If `true`, the element will have its spelling and grammar checked.\n         */\n        this.spellcheck = false;\n        /**\n         * The type of control to display. The default type is text.\n         */\n        this.type = 'text';\n        /**\n         * The value of the input.\n         */\n        this.value = '';\n        this.onInput = (ev) => {\n            const input = ev.target;\n            if (input) {\n                this.value = input.value || '';\n            }\n            this.ionInput.emit(ev);\n        };\n        this.onBlur = () => {\n            this.hasFocus = false;\n            this.focusChanged();\n            this.emitStyle();\n            this.ionBlur.emit();\n        };\n        this.onFocus = () => {\n            this.hasFocus = true;\n            this.focusChanged();\n            this.emitStyle();\n            this.ionFocus.emit();\n        };\n        this.onKeydown = () => {\n            if (this.shouldClearOnEdit()) {\n                // Did the input value change after it was blurred and edited?\n                if (this.didBlurAfterEdit && this.hasValue()) {\n                    // Clear the input\n                    this.clearTextInput();\n                }\n                // Reset the flag\n                this.didBlurAfterEdit = false;\n            }\n        };\n        this.clearTextInput = (ev) => {\n            if (this.clearInput && !this.readonly && !this.disabled && ev) {\n                ev.preventDefault();\n                ev.stopPropagation();\n            }\n            this.value = '';\n            /**\n             * This is needed for clearOnEdit\n             * Otherwise the value will not be cleared\n             * if user is inside the input\n             */\n            if (this.nativeInput) {\n                this.nativeInput.value = '';\n            }\n        };\n        this.ionInput = Object(_core_feeeff0d_js__WEBPACK_IMPORTED_MODULE_0__[\"d\"])(this, \"ionInput\", 7);\n        this.ionChange = Object(_core_feeeff0d_js__WEBPACK_IMPORTED_MODULE_0__[\"d\"])(this, \"ionChange\", 7);\n        this.ionBlur = Object(_core_feeeff0d_js__WEBPACK_IMPORTED_MODULE_0__[\"d\"])(this, \"ionBlur\", 7);\n        this.ionFocus = Object(_core_feeeff0d_js__WEBPACK_IMPORTED_MODULE_0__[\"d\"])(this, \"ionFocus\", 7);\n        this.ionInputDidLoad = Object(_core_feeeff0d_js__WEBPACK_IMPORTED_MODULE_0__[\"d\"])(this, \"ionInputDidLoad\", 7);\n        this.ionInputDidUnload = Object(_core_feeeff0d_js__WEBPACK_IMPORTED_MODULE_0__[\"d\"])(this, \"ionInputDidUnload\", 7);\n        this.ionStyle = Object(_core_feeeff0d_js__WEBPACK_IMPORTED_MODULE_0__[\"d\"])(this, \"ionStyle\", 7);\n    }\n    debounceChanged() {\n        this.ionChange = Object(_helpers_46f4a262_js__WEBPACK_IMPORTED_MODULE_2__[\"d\"])(this.ionChange, this.debounce);\n    }\n    disabledChanged() {\n        this.emitStyle();\n    }\n    /**\n     * Update the native input element when the value changes\n     */\n    valueChanged() {\n        this.emitStyle();\n        this.ionChange.emit({ value: this.value });\n    }\n    connectedCallback() {\n        this.emitStyle();\n        this.debounceChanged();\n        {\n            this.el.dispatchEvent(new CustomEvent('ionInputDidLoad', {\n                detail: this.el\n            }));\n        }\n    }\n    disconnectedCallback() {\n        {\n            document.dispatchEvent(new CustomEvent('ionInputDidUnload', {\n                detail: this.el\n            }));\n        }\n    }\n    /**\n     * Sets focus on the specified `ion-input`. Use this method instead of the global\n     * `input.focus()`.\n     */\n    async setFocus() {\n        if (this.nativeInput) {\n            this.nativeInput.focus();\n        }\n    }\n    /**\n     * Returns the native `<input>` element used under the hood.\n     */\n    getInputElement() {\n        return Promise.resolve(this.nativeInput);\n    }\n    shouldClearOnEdit() {\n        const { type, clearOnEdit } = this;\n        return (clearOnEdit === undefined)\n            ? type === 'password'\n            : clearOnEdit;\n    }\n    getValue() {\n        return this.value || '';\n    }\n    emitStyle() {\n        this.ionStyle.emit({\n            'interactive': true,\n            'input': true,\n            'has-placeholder': this.placeholder != null,\n            'has-value': this.hasValue(),\n            'has-focus': this.hasFocus,\n            'interactive-disabled': this.disabled,\n        });\n    }\n    focusChanged() {\n        // If clearOnEdit is enabled and the input blurred but has a value, set a flag\n        if (!this.hasFocus && this.shouldClearOnEdit() && this.hasValue()) {\n            this.didBlurAfterEdit = true;\n        }\n    }\n    hasValue() {\n        return this.getValue().length > 0;\n    }\n    render() {\n        const mode = Object(_core_feeeff0d_js__WEBPACK_IMPORTED_MODULE_0__[\"c\"])(this);\n        const value = this.getValue();\n        const labelId = this.inputId + '-lbl';\n        const label = Object(_helpers_46f4a262_js__WEBPACK_IMPORTED_MODULE_2__[\"f\"])(this.el);\n        if (label) {\n            label.id = labelId;\n        }\n        return (Object(_core_feeeff0d_js__WEBPACK_IMPORTED_MODULE_0__[\"h\"])(_core_feeeff0d_js__WEBPACK_IMPORTED_MODULE_0__[\"H\"], { \"aria-disabled\": this.disabled ? 'true' : null, class: Object.assign(Object.assign({}, Object(_theme_18cbe2cc_js__WEBPACK_IMPORTED_MODULE_3__[\"c\"])(this.color)), { [mode]: true, 'has-value': this.hasValue(), 'has-focus': this.hasFocus }) }, Object(_core_feeeff0d_js__WEBPACK_IMPORTED_MODULE_0__[\"h\"])(\"input\", { class: \"native-input\", ref: input => this.nativeInput = input, \"aria-labelledby\": labelId, disabled: this.disabled, accept: this.accept, autoCapitalize: this.autocapitalize, autoComplete: this.autocomplete, autoCorrect: this.autocorrect, autoFocus: this.autofocus, inputMode: this.inputmode, min: this.min, max: this.max, minLength: this.minlength, maxLength: this.maxlength, multiple: this.multiple, name: this.name, pattern: this.pattern, placeholder: this.placeholder || '', readOnly: this.readonly, required: this.required, spellCheck: this.spellcheck, step: this.step, size: this.size, type: this.type, value: value, onInput: this.onInput, onBlur: this.onBlur, onFocus: this.onFocus, onKeyDown: this.onKeydown }), (this.clearInput && !this.readonly && !this.disabled) && Object(_core_feeeff0d_js__WEBPACK_IMPORTED_MODULE_0__[\"h\"])(\"button\", { type: \"button\", class: \"input-clear-icon\", tabindex: \"-1\", onTouchStart: this.clearTextInput, onMouseDown: this.clearTextInput })));\n    }\n    get el() { return Object(_core_feeeff0d_js__WEBPACK_IMPORTED_MODULE_0__[\"e\"])(this); }\n    static get watchers() { return {\n        \"debounce\": [\"debounceChanged\"],\n        \"disabled\": [\"disabledChanged\"],\n        \"value\": [\"valueChanged\"]\n    }; }\n    static get style() { return \".sc-ion-input-ios-h{--placeholder-color:initial;--placeholder-font-style:initial;--placeholder-font-weight:initial;--placeholder-opacity:.5;--padding-top:0;--padding-end:0;--padding-bottom:0;--background:transparent;--color:initial;display:-ms-flexbox;display:flex;position:relative;-ms-flex:1;flex:1;-ms-flex-align:center;align-items:center;width:100%;padding:0!important;background:var(--background);color:var(--color);font-family:var(--ion-font-family,inherit);z-index:2}ion-item.sc-ion-input-ios-h:not(.item-label), ion-item:not(.item-label) .sc-ion-input-ios-h{--padding-start:0}.ion-color.sc-ion-input-ios-h{color:var(--ion-color-base)}.native-input.sc-ion-input-ios{border-radius:var(--border-radius);padding-left:var(--padding-start);padding-right:var(--padding-end);padding-top:var(--padding-top);padding-bottom:var(--padding-bottom);font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit;display:inline-block;-ms-flex:1;flex:1;width:100%;max-width:100%;max-height:100%;border:0;outline:none;background:transparent;-webkit-box-sizing:border-box;box-sizing:border-box;-webkit-appearance:none;-moz-appearance:none;appearance:none}\\@supports ((-webkit-margin-start:0) or (margin-inline-start:0)) or (-webkit-margin-start:0){.native-input.sc-ion-input-ios{padding-left:unset;padding-right:unset;-webkit-padding-start:var(--padding-start);padding-inline-start:var(--padding-start);-webkit-padding-end:var(--padding-end);padding-inline-end:var(--padding-end)}}.native-input.sc-ion-input-ios::-webkit-input-placeholder{color:var(--placeholder-color);font-family:inherit;font-style:var(--placeholder-font-style);font-weight:var(--placeholder-font-weight);opacity:var(--placeholder-opacity)}.native-input.sc-ion-input-ios::-moz-placeholder{color:var(--placeholder-color);font-family:inherit;font-style:var(--placeholder-font-style);font-weight:var(--placeholder-font-weight);opacity:var(--placeholder-opacity)}.native-input.sc-ion-input-ios:-ms-input-placeholder{color:var(--placeholder-color);font-family:inherit;font-style:var(--placeholder-font-style);font-weight:var(--placeholder-font-weight);opacity:var(--placeholder-opacity)}.native-input.sc-ion-input-ios::-ms-input-placeholder{color:var(--placeholder-color);font-family:inherit;font-style:var(--placeholder-font-style);font-weight:var(--placeholder-font-weight);opacity:var(--placeholder-opacity)}.native-input.sc-ion-input-ios::placeholder{color:var(--placeholder-color);font-family:inherit;font-style:var(--placeholder-font-style);font-weight:var(--placeholder-font-weight);opacity:var(--placeholder-opacity)}.native-input.sc-ion-input-ios:-webkit-autofill{background-color:transparent}.native-input.sc-ion-input-ios:invalid{-webkit-box-shadow:none;box-shadow:none}.native-input.sc-ion-input-ios::-ms-clear{display:none}.native-input[disabled].sc-ion-input-ios{opacity:.4}.cloned-input.sc-ion-input-ios{left:0;top:0;position:absolute;pointer-events:none}[dir=rtl].sc-ion-input-ios-h .cloned-input.sc-ion-input-ios, [dir=rtl] .sc-ion-input-ios-h .cloned-input.sc-ion-input-ios, [dir=rtl].sc-ion-input-ios .cloned-input.sc-ion-input-ios{left:unset;right:unset;right:0}.input-clear-icon.sc-ion-input-ios{margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;padding-left:0;padding-right:0;padding-top:0;padding-bottom:0;background-position:50%;border:0;outline:none;background-color:transparent;background-repeat:no-repeat;visibility:hidden;-webkit-appearance:none;-moz-appearance:none;appearance:none}.has-focus.has-value.sc-ion-input-ios-h .input-clear-icon.sc-ion-input-ios{visibility:visible}.has-focus.sc-ion-input-ios-h{pointer-events:none}.has-focus.sc-ion-input-ios-h a.sc-ion-input-ios, .has-focus.sc-ion-input-ios-h button.sc-ion-input-ios, .has-focus.sc-ion-input-ios-h input.sc-ion-input-ios{pointer-events:auto}.sc-ion-input-ios-h{--padding-top:10px;--padding-end:8px;--padding-bottom:10px;--padding-start:0;font-size:inherit}.item-label-floating.sc-ion-input-ios-h, .item-label-floating .sc-ion-input-ios-h, .item-label-stacked.sc-ion-input-ios-h, .item-label-stacked .sc-ion-input-ios-h{--padding-top:8px;--padding-bottom:8px;--padding-start:0px}.input-clear-icon.sc-ion-input-ios{background-image:url(\\\"data:image/svg+xml;charset=utf-8,<svg%20xmlns=\\'http://www.w3.org/2000/svg\\'%20viewBox=\\'0%200%20512%20512\\'><path%20fill=\\'var(--ion-color-step-600,%20%23666666)\\'%20d=\\'M403.1,108.9c-81.2-81.2-212.9-81.2-294.2,0s-81.2,212.9,0,294.2c81.2,81.2,212.9,81.2,294.2,0S484.3,190.1,403.1,108.9z%20M352,340.2L340.2,352l-84.4-84.2l-84,83.8L160,339.8l84-83.8l-84-83.8l11.8-11.8l84,83.8l84.4-84.2l11.8,11.8L267.6,256L352,340.2z\\'/></svg>\\\");width:30px;height:30px;background-size:18px}\"; }\n};\nlet inputIds = 0;\n\n\n\n\n//# sourceURL=webpack:///./node_modules/@ionic/core/dist/esm/ion-input-ios.entry.js?");

/***/ })

}]);